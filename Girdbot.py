import ccxt
import numpy as np
import json
import pandas as pd # Th∆∞ vi·ªán m·∫°nh m·∫Ω ƒë·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu

# --- C·∫•u h√¨nh Bot v√† Backtest ---
# Gi·ªØ nguy√™n c·∫•u h√¨nh bot v√† th√™m c·∫•u h√¨nh cho backtest
CONFIG = {
    'symbol': 'ETH/USDT',
    'exchange_name': 'binance',
    'grid': {
        'upper_price': 4200,
        'lower_price': 3700,
        'levels': 50,
    },
    'trade': {
        'fee_percent': 0.1,
        'quantity_per_grid': 0.0001
    },
    'backtest': {
        'timeframe': '1h', # Khung th·ªùi gian c·ªßa n·∫øn (1h, 4h, 1d)
        'since': '2025-08-01T00:00:00Z' # B·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu t·ª´ ng√†y n√†y
    }
}

# --- Kh·ªüi t·∫°o k·∫øt n·ªëi s√†n ---
exchange = getattr(ccxt, CONFIG['exchange_name'])()

def fetch_historical_data(symbol, timeframe, since):
    """
    H√†m m·ªõi: T·∫£i d·ªØ li·ªáu OHLCV l·ªãch s·ª≠ t·ª´ s√†n giao d·ªãch.
    """
    try:
        print(f"ƒêang t·∫£i d·ªØ li·ªáu l·ªãch s·ª≠ cho {symbol} t·ª´ {since}...")
        # L·∫•y d·ªØ li·ªáu n·∫øn: [timestamp, open, high, low, close, volume]
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, exchange.parse8601(since), limit=1000)
        if not ohlcv:
            print("Kh√¥ng c√≥ d·ªØ li·ªáu tr·∫£ v·ªÅ.")
            return None
        # Chuy·ªÉn th√†nh DataFrame c·ªßa Pandas ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        print(f"T·∫£i th√†nh c√¥ng {len(df)} c√¢y n·∫øn {timeframe}.")
        return df
    except Exception as e:
        print(f"L·ªói khi t·∫£i d·ªØ li·ªáu: {e}")
        return None

def setup_grid():
    """T·∫°o c√°c m·ª©c gi√° trong l∆∞·ªõi."""
    return np.linspace(CONFIG['grid']['lower_price'], CONFIG['grid']['upper_price'], CONFIG['grid']['levels'])

def run_backtest():
    """
    H√†m ch√≠nh ƒë∆∞·ª£c thay ƒë·ªïi: Ch·∫°y logic bot tr√™n d·ªØ li·ªáu l·ªãch s·ª≠.
    """
    print("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh Backtest...")
    
    # B∆∞·ªõc 1: L·∫•y d·ªØ li·ªáu
    historical_data = fetch_historical_data(
        CONFIG['symbol'],
        CONFIG['backtest']['timeframe'],
        CONFIG['backtest']['since']
    )
    if historical_data is None:
        return

    # Kh·ªüi t·∫°o c√°c th√¥ng s·ªë cho backtest
    grid_levels = setup_grid()
    state = {'open_buy_orders': {}}
    total_profit = 0
    completed_trades = 0

    print("\n" + "="*50)
    print("B·∫ÆT ƒê·∫¶U M√î PH·ªéNG GIAO D·ªäCH")
    print("="*50 + "\n")

    # B∆∞·ªõc 2: V√≤ng l·∫∑p ch√≠nh duy·ªát qua t·ª´ng c√¢y n·∫øn
    for index, row in historical_data.iterrows():
        current_price = row['close'] # S·ª≠ d·ª•ng gi√° ƒë√≥ng c·ª≠a c·ªßa n·∫øn ƒë·ªÉ m√¥ ph·ªèng
        current_time = row['timestamp']

        # B∆∞·ªõc 3: √Åp d·ª•ng logic bot (t∆∞∆°ng t·ª± nh∆∞ code c≈©)
        # --- Logic B√°n ---
        for buy_price_str in list(state['open_buy_orders'].keys()):
            buy_price = float(buy_price_str)
            buy_order_info = state['open_buy_orders'][buy_price_str]
            sell_target_price = grid_levels[buy_order_info['grid_index'] + 1]

            # Trong backtest, ta gi·∫£ ƒë·ªãnh l·ªánh kh·ªõp n·∫øu gi√° cao nh·∫•t c·ªßa n·∫øn v∆∞·ª£t qua m·ª©c b√°n
            if row['high'] >= sell_target_price:
                buy_cost = buy_price * CONFIG['trade']['quantity_per_grid']
                sell_revenue = sell_target_price * CONFIG['trade']['quantity_per_grid']
                buy_fee = buy_cost * (CONFIG['trade']['fee_percent'] / 100)
                sell_fee = sell_revenue * (CONFIG['trade']['fee_percent'] / 100)
                profit = (sell_revenue - buy_cost) - (buy_fee + sell_fee)
                
                total_profit += profit
                completed_trades += 1

                print(f"‚úÖ [{current_time}] CH·ªêT L·ªúI: Mua {buy_price:.2f} -> B√°n {sell_target_price:.2f} | L·ª£i nhu·∫≠n: {profit:.4f} USDT")
                
                del state['open_buy_orders'][buy_price_str]

        # --- Logic Mua ---
        for i, level_price in enumerate(grid_levels):
            if i == len(grid_levels) - 1: continue

            level_price_str = f"{level_price:.2f}"
            
            # Gi·∫£ ƒë·ªãnh l·ªánh mua kh·ªõp n·∫øu gi√° th·∫•p nh·∫•t c·ªßa n·∫øn ch·∫°m ho·∫∑c xu·ªëng d∆∞·ªõi m·ª©c mua
            if row['low'] <= level_price and level_price_str not in state['open_buy_orders']:
                print(f"üîµ [{current_time}] ƒê·∫∂T L·ªÜNH MUA t·∫°i {level_price:.2f} USDT")
                
                state['open_buy_orders'][level_price_str] = {
                    'grid_index': i,
                    'quantity': CONFIG['trade']['quantity_per_grid']
                }

    # B∆∞·ªõc 4: B√°o c√°o k·∫øt qu·∫£
    print("\n" + "="*50)
    print("üìä B√ÅO C√ÅO K·∫æT QU·∫¢ BACKTEST")
    print("="*50)
    print(f"Kho·∫£ng th·ªùi gian: {historical_data['timestamp'].iloc[0]} -> {historical_data['timestamp'].iloc[-1]}")
    print(f"Khung th·ªùi gian: {CONFIG['backtest']['timeframe']}")
    print("-" * 20)
    print(f"T·ªïng s·ªë giao d·ªãch ho√†n th√†nh: {completed_trades}")
    print(f"T·ªïng l·ª£i nhu·∫≠n r√≤ng: {total_profit:.4f} USDT")
    
    # T√≠nh to√°n l·ª£i nhu·∫≠n n·∫øu gi·ªØ nguy√™n kh√¥ng trade (Buy and Hold)
    initial_price = historical_data['open'].iloc[0]
    final_price = historical_data['close'].iloc[-1]
    buy_and_hold_return = ((final_price - initial_price) / initial_price) * 100
    print(f"T·ª∑ su·∫•t l·ª£i nhu·∫≠n n·∫øu 'Buy and Hold': {buy_and_hold_return:.2f}%")
    
    print("\nL∆∞u √Ω: K·∫øt qu·∫£ n√†y ch∆∞a t√≠nh ƒë·∫øn tr∆∞·ª£t gi√° v√† c√°c y·∫øu t·ªë th·ªã tr∆∞·ªùng ph·ª©c t·∫°p kh√°c.")


if __name__ == '__main__':
    run_backtest()